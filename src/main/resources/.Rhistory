seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(100, 300))
df_marginal_age_group <- data.frame(gender = c("age_0_14", "age_15_24", "age_25_54"), count = c(100, 100, 200))
df_marginal_migration <- data.frame(gender = c("Dutch", "Western", "Non-Western"), count = c(50, 150, 200))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
library(mipfp)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(50, 80, 60, 90, 40, 60, 50, 80, 60, 90, 40, 60))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(100, 300))
df_marginal_age_group <- data.frame(gender = c("age_0_14", "age_15_24", "age_25_54"), count = c(100, 100, 200))
df_marginal_migration <- data.frame(gender = c("Dutch", "Western", "Non-Western"), count = c(50, 150, 200))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
View(df_marginal_migration)
View(df_marginal_gender)
View(df_marginal_age_group)
# Example 2: 3-way table (V1,V2,V3) of dim=(2,3,2)
# seed
library(mipfp)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(50, 80, 60, 90, 40, 60, 50, 80, 60, 90, 40, 60))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(100, 300))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(50, 150, 200))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
View(df_marginal_age_group)
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
tgt.data.3d
library(mipfp)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(50, 80, 60, 90, 40, 60, 50, 80, 60, 90, 40, 60))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(100, 300))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(50, 50, 200, 200))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(50, 150, 200))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
View(df_marginal_age_group)
library(mipfp)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(50, 80, 60, 90, 40, 60, 50, 80, 60, 90, 40, 60))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(100, 300))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(50, 50, 200, 100))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(50, 150, 200))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
library(mipfp)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(50, 80, 60, 90, 40, 60, 50, 80, 60, 90, 40, 60))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(0.3, 0.7))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(0.2, 0,1, 0.3, 0.4))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(0.3, 0.3, 0.4))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(0.2, 0,1, 0.3, 0.4))
e 2: 3-way table (V1,V2,V3) of dim=(2,3,2)
# seed
library(mipfp)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(50, 80, 60, 90, 40, 60, 50, 80, 60, 90, 40, 60))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(0.3, 0.7))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(0.2, 0.1, 0.3, 0.4))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(0.3, 0.3, 0.4))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(0.3, 0.7))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(0.2, 0.1, 0.3, 0.4))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(0.3, 0.3, 0.4))
View(df_stratified)
sum(df_stratified$count)
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
# list of dimensions of each marginal constrain
tgt.data.3d <- list(target.V1, target.V2.V3)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
df_marginal_gender$count
c(50, 16)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(0.3, 0.7))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(0.2, 0.1, 0.3, 0.4))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(0.3, 0.3, 0.4))
target.V1 <- df_marginal_gender$count
target.V1
target.V2.V3 <- array(4, dim=c(4,2))
target.V2.V3
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
library(mipfp)
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
# desired targets (margins) : V1 and (V2,V3)
df_marginal_gender <- data.frame(gender = c("male", "female"), count = c(0.3, 0.7))
df_marginal_age_group <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"), count = c(0.2, 0.1, 0.3, 0.4))
df_marginal_migration <- data.frame(migration_background = c("Dutch", "Western", "Non-Western"), count = c(0.3, 0.3, 0.4))
target.V1 <- df_marginal_gender$count
#target.V2.V3 <- array(4, dim=c(3,2))
target.V2.V3 <- as.matrix(data.frame(df_marginal_age_group$count, df_marginal_migration$count))
array(4, dim=c(3,2))
target.V2.V3[1,1] <- 10
target.V2.V3 <- array(1, dim=c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2]))))
target.V2.V3[1,1] <- 10
target.V2.V3
target.V2.V3[3,1] <- 22
target.V2.V3[4,2] <- 14
target.V2.V3
tgt.data.2d <- list(df_marginal_gender$count, df_marginal_age_group$count, df_marginal_migration$count)
# storing the margins in a list
tgt.data.3d <- list(df_marginal_gender$count, df_marginal_age_group$count, df_marginal_migration$count)
# storing the description of target data in a list
tgt.list.3d <- list( 1, c(2,3) )
# calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, iter=50, print=TRUE, tol=1e-5)
df_output <- as.data.frame(res.3d$x.hat)
View(df_output)
res.3d
sum(df_output)
seed.3d <- array(1,c(2,4,2))
seed.3d[1,1,1] <- 4
# desired targets (margins)
target.row <- array(c(2,2,2,2), dim = c(2,4))
target.col <- array(c(3,1,3,1,1,3,1,3), dim = c(4,2))
tgt.data.3d <- list(target.col, target.row, target.row)
tgt.list.3d <- list(1,2,3)
#calling the Ipfp function
res.3d <- Ipfp(seed.3d, tgt.list.3d, tgt.data.3d, print = TRUE)
warnings()
seed.3d <- array(1, c(2,4,2))
seed.3d
# desired targets (margins)
target.row <- array(c(2,2,2,2), dim = c(2,4))
target.row
target.col
df_stratified <- data.frame(age = c("age_0_14", "age_15_24", "age_25_54","age_55_84"),
gender = c("male", "female", "male", "female", "male", "female"),
migration_background = c("Dutch", "Western", "Non-Western"),
count = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05))
seed.3d <- array(data = as.numeric(df_stratified$count), dim = c(length(unique(df_stratified[,1])), length(unique(df_stratified[,2])), length(unique(df_stratified[,3]))))
marginal1_row <- df_stratified$age
# Marginal distribution 2 for the columns
marginal2_col <-df_stratified$gender
# Marginal distribution 3 for the total of the table
marginal3_total <- df_stratified$migration_background
# Create a list with the three target marginal distributions
target_rowcol <- list(marginal1_row, marginal2_col)
# Set the target marginal distribution for the total of the table
target_total <- list(marginal3_total)
# Create a list of dimensions for each target marginal distribution
target_dims <- list(c(1), c(2))
#calling the Ipfp function
res.3d <-  Ipfp(seed, target_rowcol, target_total, target_dims)
#calling the Ipfp function
res.3d <-  Ipfp(seed.3d, target_rowcol, target_total, target_dims)
seed.3d <- array(1,c(2,4,2))
seed.3d
target.V2.V3 <- array(4, dim=c(4,2))
target.V2.V3
seed.3d <- array(1,c(2,4,2))
seed.3d[1,1,1] <- 4
seed.3d[1,3,1] <- 10
seed.3d[1,4,2] <- 6
# desired targets (margins) : V1 and (V2,V3)
target.V1 <- c(50, 16)
target.V2.V3 <- array(4, dim=c(4,2))
target.V2.V3[1,1] <- 10
target.V2.V3[3,1] <- 22
target.V2.V3[4,2] <- 14
seed.3d
target.V2.V3
library(ipflasso)
library(dplyr)
# Generate simulated data
set.seed(123)
n <- 1000
x1 <- sample(LETTERS[1:3], n, replace = TRUE, prob = c(0.4, 0.3, 0.3))
x2 <- sample(LETTERS[4:7], n, replace = TRUE, prob = c(0.2, 0.3, 0.4, 0.1))
x3 <- sample(LETTERS[8:10], n, replace = TRUE, prob = c(0.4, 0.3, 0.3))
y <- sample(1:5, n, replace = TRUE, prob = c(0.1, 0.2, 0.3, 0.2, 0.2))
data <- data.frame(x1 = x1, x2 = x2, x3 = x3, y = y)
# Create contingency tables
tab1 <- table(data$x1, data$x2, data$y)
tab2 <- table(data$x1, data$x3, data$y)
tab3 <- table(data$x2, data$x3, data$y)
# Run the 3-way IPF
fit <- ipf_lasso(list(tab1, tab2, tab3), lambda = 0.1, maxiter = 1000)
library(ipflasso)
# Run the 3-way IPF
fit <- ipf_lasso(list(tab1, tab2, tab3), lambda = 0.1, maxiter = 1000)
?ipflasso
library(ipfp)
# Create an example matrix with known marginals
A <- matrix(c(20, 30, 50, 40, 60, 100, 30, 45, 75), nrow = 3, ncol = 3,
dimnames = list(c("Region 1", "Region 2", "Region 3"),
c("Age Group 1", "Age Group 2", "Age Group 3")))
# Create the row and column marginal vectors
row.marginals <- rowSums(A)
col.marginals <- colSums(A)
# Create the layer marginal vector
layer.marginals <- c(160, 200, 150)
# Perform the IPF
result <- ipfp(A, row.marginals, col.marginals, layer.marginals)
library(ipfp)
# Create an example matrix with known marginals
A <- matrix(c(20, 30, 50, 40, 60, 100, 30, 45, 75), nrow = 3, ncol = 3,
dimnames = list(c("Region 1", "Region 2", "Region 3"),
c("Age Group 1", "Age Group 2", "Age Group 3")))
# Create the row and column marginal vectors
row.marginals <- rowSums(A)
col.marginals <- colSums(A)
# Create the layer marginal vector
layer.marginals <- c(160, 200, 150)
# Perform the IPF
result <- ipfp(A, row.marginals, col.marginals, layer.marginals)
seed.3d <- array(1,c(2,4,2))
target.V2.V3 <- array(4, dim=c(4,2))
target.V2.V3
target.V1 <- c(50, 16)
tgt.data.3d <- list(target.V1, target.V2.V3)
tgt.data.3d
seed.3d
library(readr)
parameterset <- read_delim("parameterset.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(parameterset)
write.csv('parameterset.csv'. parameterset, row.names=FALSE)
write.csv('parameterset.csv', parameterset, row.names=FALSE)
write.csv('parameterset1.csv', parameterset)
write.csv(parameterset, 'parameterset1.csv')
write.csv(parameterset, 'parameterset1.csv', row.names = FALSE)
setwd("~/GitHub projects/DHZW-simulation_Sim-2APL/src/main/resources")
# Define the list of labels
labels <- c("Label1", "Label2", "Label3", "Label4")
# Generate all possible combinations of values
values <- seq(from = -1, to = 1, by = 0.2)
combinations <- expand.grid(values, values, values, values)
# Assign the list of labels as column names
colnames(combinations) <- labels
# Print the resulting dataframe
print(combinations)
View(combinations)
# Define the list of labels
labels <- c("Label1", "Label2", "Label3", "Label4")
# Generate all possible combinations of values
values <- seq(from = -1.0, to = 1.0, by = 0.2)
combinations <- expand.grid(values, values, values, values)
# Assign the list of labels as column names
colnames(combinations) <- labels
# Print the resulting dataframe
print(combinations)
library(this.path)
library(readr)
# Define the list of labels
labels <- read.csv("labels.csv", header = FALSE, stringsAsFactors = FALSE)[,1]
# Define the list of labels
labels <- read.csv("parameter_labels.csv", header = FALSE, stringsAsFactors = FALSE)[,1]
# Generate all possible combinations of values
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
# Define the list of labels
labels <- read.csv("parameter_labels.csv", header = TRUE, stringsAsFactors = FALSE)[,1]
# Generate all possible combinations of values
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
View(values)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, length(values))
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
values <- replicate(52, seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
library(this.path)
library(readr)
# Define the list of labels
labels <- read.csv("parameter_labels.csv", header = TRUE, stringsAsFactors = FALSE)[,1]
# Generate all possible combinations of values
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
# Read the labels from a CSV file
labels <- read.csv("parameter_labels.csv", header = TRUE, stringsAsFactors = FALSE)[, 1]
# Define the sequence of values for each label
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
labels
# Define the sequence of values for each label
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = TRUE)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
# Define the sequence of values for each label
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
values <- list()
for (i in 1:length(labels)) {
values[[i]] <- seq(from = -1, to = 1, by = 0.2)
}
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
values <- seq(from = -1, to = 1, by = 0.2)
combinations <- expand.grid(values, values, values, values)
library(this.path)
library(readr)
# Read the labels from a CSV file
labels <- read.csv("parameter_labels.csv", header = TRUE, stringsAsFactors = FALSE)[, 1]
# Define the sequence of values for each label
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Print labels and values
print(labels)
print(values)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
# Assign the list of labels as column names
colnames(combinations) <- labels
# Print the resulting dataframe
print(combinations)
library(this.path)
library(readr)
# Read the labels from a CSV file
labels <- read.csv("parameter_labels.csv", header = TRUE, stringsAsFactors = FALSE)[, 1]
# Define the sequence of values for each label
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Print labels and values
print(labels)
print(values)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
# Assign the list of labels as column names
colnames(combinations) <- labels
# Print the resulting dataframe
print(combinations)
library(this.path)
library(readr)
# Read the labels from a CSV file
labels <- read.csv("parameter_labels.csv", header = TRUE, stringsAsFactors = FALSE)[, 1]
# Define the sequence of values for each label
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Print labels and values
print(labels)
print(values)
# Generate all possible combinations of values
combinations <- do.call(expand.grid, values)
library(this.path)
library(readr)
# Read the labels from a CSV file
labels <- read.csv("parameter_labels.csv", header = TRUE, stringsAsFactors = FALSE)[, 1]
# Define the sequence of values for each label
values <- replicate(length(labels), seq(from = -1, to = 1, by = 0.2), simplify = FALSE)
# Generate all possible combinations of values
combinations <- expand.grid(values, values, values, values)
View(combinations)
i=1
# Transpose the current row
transposed_row <- t(combinations[i,])
View(transposed_row)
View(transposed_row)
View(combinations)
# Transpose the current row
transposed_row <- t(combinations[i,])
View(transposed_row)
combinations[i,]
View(combinations)
# Generate all possible combinations of the labels
combinations <- expand.grid(replicate(length(labels), c(-1, seq(-0.8, 0.8, by = 0.2), 1), simplify = FALSE))
a <- seq(-1, 1, 0.2)
expand.grid(a,a, a)
result <- list()
for(i in 1:5){
result[[i]] <- expand.grid(a,a)
}
expand.grid(a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a,
a
)
